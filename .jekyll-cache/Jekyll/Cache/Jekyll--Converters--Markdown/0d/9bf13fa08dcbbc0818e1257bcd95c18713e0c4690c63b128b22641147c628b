I"<p>최근 과제랑 할 일이 많아져서 PS를 할 시간이 없지만, 그래도 최근에 풀었던 몇몇 재미있는 문제들을 review 해보려 한다.</p>

<hr />

<h2 id="boj-18710---greatest-chicken-dish">BOJ 18710 - Greatest Chicken Dish</h2>
<p>구간 $[L, R]$과 정수 $D$가 $Q$개 주어지면, 해당 구간 내 어떤 구간의 최대공약수의 값이 $D$와 같은 구간의 수를 찾는 문제이다.</p>

<p>배열에서 구간 gcd를 구할 때는, 가능한 gcd 결과가 $O(\log{K})$개 정도 된다는 것을 생각할 수 있다(여기서 $K$는 입력에서 주어지는 가장 큰 수). 따라서 미리 구간의 gcd 값으로 나올 수 있는 결과를 구해 놓을 수 있고, 이는 이분 탐색을 이용하면 $O(N\log{N}\log{K})$ 시간복잡도에 할 수 있다. 임의의 구간 gcd 값을 구하는 것은 sparse table을 이용해 $O(1)$에 가능하니 이 역시 전처리를 해야 한다.</p>

<p>주어지는 쿼리를 오프라인으로 처리해도 되므로, 쿼리의 수가 최대 5만개라는 사실에 유의하여 Mo’s Algorithm을 적용해보자. 어떠한 구간 $[L, R]$의 답을 가지고 있으면, 구간 맨 끝에 원소 하나가 추가되는 경우를 생각해보자. 이 경우 새롭게 만들어지는 gcd는 추가되는 원소가 끝에 위치한 구간이며, 이는 앞에서 전처리한 결과를 통해 대략 $O(\log{K})$로 구할 수 있다. 마찬가지로 구간에서 원소가 하나 줄어들 때 역시 동일한 시간복잡도로 처리할 수 있다.</p>

<p>따라서 전체 시간복잡도 $O(N\log{N}\log{K}+(N+Q)\sqrt{N}\log{K})$로 해결할 수 있다.</p>

<hr />

<h2 id="boj-5476---장난감-동물">BOJ 5476 - 장난감 동물</h2>
<p>상당히 귀찮게 생긴 문제다. $B$의 값마다 다르게 풀어야 해서 세 문제를 푼다고 생각하면 된다. (아마 서브태스크 쉽게 나누려고 한 것 같다)</p>

<ul>
  <li>$B$가 1인 경우</li>
</ul>

<blockquote>
  <blockquote>
    <p>일차원 좌표 상에서 문제를 푸는 것과 같으니, 단순 이분 탐색으로도 맞을 수 있다. 이 부분은 패스.</p>
  </blockquote>
</blockquote>

<ul>
  <li>$B$가 2인 경우</li>
</ul>

<blockquote>
  <blockquote>
    <p>이차원 좌표에서, $N$개의 점이 있는데 각각을 중심으로 하는 대각선 길이 $2D$의 마름모 안에 있는 점들의 수를 모두 합한 값을 출력하면 된다.</p>
  </blockquote>
</blockquote>

<blockquote>
  <blockquote>
    <p>마름모가 나오는 계산기하 문제는, 점 $(x, y)$를 점 $(x-y, x+y)$로 변환하는 테크닉이 매우 유용하다. 이렇게 변환하면 마름모가 정사각형이 되어, 문제를 풀기 수월해지기 때문이다. 이러한 변환을 거치면 문제는 각각의 점을 중심으로 하는 한 변의 길이가 $2B$인 정사각형 안에 있는 점들의 수를 모두 합한 값을 구하는 것이 된다.</p>
  </blockquote>
</blockquote>

<blockquote>
  <blockquote>
    <p>이는 여러 가지 방법이 있는데, 본인은 merge sort tree를 이용해 해결하였다. 주어지는 점들을 정렬하여 sliding window 기법을 이용하면 일반적인 세그트리로도 문제를 해결할 수 있다.</p>
  </blockquote>
</blockquote>

<ul>
  <li>$B$가 3인 경우</li>
</ul>

<blockquote>
  <blockquote>
    <p>삼차원의 경우에는 문제가 어려울 것 같지만, 좌표의 범위가 크지 않아 생각보다 간단하게 해결할 수 있다.</p>
  </blockquote>
</blockquote>

<blockquote>
  <blockquote>
    <p>각 좌표를 $(x, y, z)$에서 $(x, y-z, y+z)$로 바꾸면, 각각의 $x$좌표마다 $B$가 2인 경우에 대해 문제를 푼다고 생각할 수 있다. 이는 이차원 누적합 배열로 충분히 할 수 있다.</p>
  </blockquote>
</blockquote>

<p>$B=2$인 경우만 잘 해결하면 무리 없이 풀 수 있는 문제이다.</p>

<hr />

<h2 id="boj-10129---작은-새">BOJ 10129 - 작은 새</h2>
<p>$Q$의 범위가 아주 작으니, 각각에 대해 $O(N)$ 정도에만 처리하면 문제를 풀 수 있을 것이라 생각할 수 있다.</p>

<p>일직선상에서 방향이 정해져 있으므로 DP로 점화식을 세울 수 있다. $D[i]:=i$번째 나무까지 가기 위한 최소 피로도로 정의하면, $D[i] = max_{i-K\leq j&lt;i}(D[j] + (H[j]&lt;=H[i]))$ 라는 점화식을 세울 수 있다. 그러나 이는 간단히 계산하면 $O(NK)$가 걸리니, 다른 방법을 생각하자.</p>

<p>우리가 보아야 할 구간이 일정한 간격이 이동하는 형태이므로, deque를 통해 문제를 해결할 수 있다. $D[i]$ 값을 바탕으로 deque 내부를 오름차순으로 유지하자. 구체적으로, $(D[i], H[i])$ pair를 deque에 넣는데 내부가 $D[i]$가 오름차순, $D[i]$가 같으면 $H[i]$가 큰 것을 넣기로 하자. 그렇다면, deque 맨 앞 두 개만 비교해도 $D[i]$의 값을 충분히 구할 수 있음을 알 수 있다.</p>

<p>이와 비슷하게 해결할 수 있는 문제는 <a href="https://www.acmicpc.net/problem/17018">이 문제</a>가 있다.</p>

:ET