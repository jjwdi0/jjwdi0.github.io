I"X<p>올해 ICPC를 또 나갈 것 같다. 이제부터는 팀연습 하고 기록을 남겨두려고 하는데, 간단한 타임라인 + 문제 설명 + 내가 뭘 했는가 를 중점적으로 정리할 것 같다.</p>

<p><a href="&quot;https://www.acmicpc.net/category/detail/1176&quot;">CERC 2013(BOJ 링크)</a></p>

<hr />

<h3 id="b-what-does-the-fox-say-010">B. What does the fox say? (0:10)</h3>
<p>옛날에 The Fox 노래가 유행했을 시절인 것 같다. 문자열이 주어지면 그 문자열에서 몇 개 빼서 남는 부분 출력하면 된다.</p>

<p>대회 때 내가 해결한 문제가 아니라 끝나고 다시 풀어봤는데, 한 줄을 입력받는 작업이 잘 되지 않았다. <code class="highlighter-rouge">getline(cin, x)</code> 을 좀 더 공부해야겠다.</p>

<h3 id="l-bus-011">L. Bus (0:11)</h3>
<p>사람이 절반 하고 반 명 내리는데 다치는 사람이 없어야 한다. (ㄷㄷ) 그냥 $2^n-1$을 찍으면 된다.</p>

<h3 id="f-draughts-111">F. Draughts (1:11)</h3>
<p>L을 푼 후 E를 팀원이 시도했는데 WA를 받았다. 대략 한 시간 지날 때까지 고민하다가 답이 안 나와서, 쉽게 풀리는 F를 그 다음으로 풀었다. F를 내가 안 풀어서 모르지만, 처음부터 E 대신 풀이가 확실한 F를 먼저 시도했어야 할 것 같은 생각이 든다.</p>

<h3 id="c-magical-gcd-116">C. Magical GCD (1:16)</h3>
<p>어떤 수열 A에서 연속된 구간이 이루는 gcd 값의 개수는 생각보다 많지 않다. 이를 이용하면 어렵지 않게 풀 수 있다. 난 <code class="highlighter-rouge">std::map</code> + DP로 풀었다.</p>

<p>연습 때는 팀원이 풀었는데, 범위를 잘못 알아서 세 번이나 틀렸다.</p>

<h3 id="k-digraphs-151">K. Digraphs (1:51)</h3>
<p>일단 예제 입력부터 아득하다… 인접하게 놓일 수 있는 알파벳들로 그래프를 구성하면, 그 그래프에서 최장 경로를 찾아주면 된다. 이때 사이클이 있는 경우와 없는 경우로 나뉘는데, 사이클이 있으면 20X20 크기만큼 그 사이클을 출력해주면 되고, 사이클이 없다면 DAG에서 DP로 최장 거리를 구해주면 된다. 생각하는 건 어렵지 않은데 손이 귀찮은 문제.</p>

<h3 id="i-cranes-207">I. Cranes (2:07)</h3>
<p>같은 크기의 인접한 구간 두 개를 잡아서 위치를 바꾸는 행위를 반복해 정렬하는 문제다. 구간 두 개를 바꾼다는 것과 $n \leq 10,000$인 것에서 splay tree를 생각했으나 푼 팀이 많아서 믿음을 가지고 $O(N^2)$을 돌려서 맞았다.</p>

<h3 id="a-rubiks-rectangle-221">A. Rubik’s Rectangle (2:21)</h3>
<p>NXM 보드에 순열이 주어지면, 각 행이나 열을 뒤집어서 이를 정렬해야 한다. 조금만 생각해 보면 각 숫자가 이동할 수 있는 칸이 네 개밖에 안돼서 이를 이용하면 쉽게 풀릴 것 같지만, 행이나 열을 뒤집을 때 다른 값의 위치에도 영향을 주기 때문에 쉽지만은 않다.</p>

<p>먼저 가로와 세로 길이를 짝수라고 가정하자. 홀수인 경우 짝수에서 문제를 풀고 일직선에서 푼 문제를 합치면 된다. 이때 이동할 수 있는 네 부분에 제대로 된 숫자가 있는지 확인하고, 이를 순서대로 나열했을 때 inversion의 홀짝을 구해준다. 우리는 각 부분의 inversion을 짝수로 만들건데, 이를 가능하게 하는 조건은 조금만 생각해보면 알 수 있을 것이다. 이를 통해 모든 부분의 inversion이 짝수가 되었다면, inversion의 홀짝은 유지하면서 숫자 위치를 바꾸는 연산을 생각하자. 이를테면 <code class="highlighter-rouge">Rx Cy Rx Cy</code>를 수행했을 때에는, 위치가 바뀌는 세 수는 시계 방향으로 한 칸씩 이동함을 알 수 있다. 이를 이용해서 전체 순열을 정렬해줄 수 있고, 방법을 그대로 출력하기만 하면 된다.</p>

<h3 id="j-captain-obvious-and-the-rabbit-man-310">J. Captain Obvious and the Rabbit-Man (3:10)</h3>
<p>문제는 피보나치 수열에 대해 구하는 것이지만, 실제 풀이는 이와 관련이 없다.</p>

<hr />
:ET